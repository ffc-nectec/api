
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.50'
}

group 'ffc.api'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/blazei/maven" }
    maven { url "https://maven.google.com" }
}

configurations {
    ktlint
}

dependencies {
    def jettyVersion = "9.4.1.v20170120"
    def jerseyVersion = "2.25.1"

    ktlint "com.github.shyiko:ktlint:0.24.0"

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "com.google.code.gson:gson:2.8.1"
    compile "org.eclipse.jetty:jetty-server:$jettyVersion"
    compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    compile "org.eclipse.jetty:jetty-http:$jettyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-jetty-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile 'com.google.firebase:firebase-admin:5.11.0'
    compile "args4j:args4j:2.33"
    compile 'me.piruin:geok-gson:1.0.0-alpha-2'
    compile "com.github.ffc-nectec:entities:1.0.0-alpha2"
    compile "joda-time:joda-time:2.9.9"
    compile "org.mongodb:mongo-java-driver:3.6.3"


    testImplementation "org.mockito:mockito-core:2.19.0"
    testImplementation "org.amshove.kluent:kluent:1.34"
    testImplementation "junit:junit:4.12"
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task stage(dependsOn: ['build', 'clean'])

build.mustRunAfter clean

jar {
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    destinationDir = file("$rootDir/build/cloud/bin")
    manifest { attributes 'Main-Class': 'ffc.airsync.api.FFCApiServer' }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/LICENSE*'
    exclude 'about.html'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

